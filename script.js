// script.js
window.onload = function () {
  console.log("‚úÖ window.onload Áô∫Âãï ‚Üí JSÂãï„ÅÑ„Å¶„Çã„ÇàÔºÅ");
};
function checkPrices(text) {
  console.log("üß™ Ê§úÊüªÂØæË±°„ÉÜ„Ç≠„Çπ„Éà:\n", text);
  const pricePattern = /(\d{2,5})ÂÜÜ\s*[\(Ôºà]?(Á®éËæº|Á®éÊäú)?(?:‰æ°Ê†º)?\s*[:Ôºö]?\s*(\d{2,5})ÂÜÜ[\)Ôºâ]?/g;
  const results = [];

  const matches = [...text.matchAll(pricePattern)];
  console.log("üí° „Éû„ÉÉ„ÉÅ„Åó„Åü‰æ°Ê†ºÊÉÖÂ†±:", matches); // ‚Üê ËøΩÂä†ÔºÅ

  matches.forEach((match) => {
    console.log("üì¶ matchÂÜÖÂÆπ:", match); // ‚Üê ÂêÑmatch„ÅÆË©≥Á¥∞„É≠„Ç∞
    const mainPrice = parseInt(match[1], 10);
    const taxType = match[2];
    const subPrice = parseInt(match[3], 10);


    if (taxType && subPrice) {
      const expected = taxType === "Á®éËæº" ? Math.round(subPrice * 1.1) : Math.round(mainPrice / 1.1);
      const actual = taxType === "Á®éËæº" ? mainPrice : subPrice;
      const isValid = Math.abs(expected - actual) <= 1;

      if (!isValid) {
        results.push(`‚ö† Ë®àÁÆó‰∏ç‰∏ÄËá¥: ${mainPrice}ÂÜÜ ‚â† ${taxType}‰æ°Ê†º ${subPrice}ÂÜÜ`);
      } else {
        results.push(`‚úÖ OK: ${mainPrice}ÂÜÜ (${taxType}‰æ°Ê†º ${subPrice}ÂÜÜ)`);
      }
    } else {
      results.push(`‚úÖ Âçò‰Ωì‰æ°Ê†º: ${mainPrice}ÂÜÜ`);
    }
  });

  if (results.length === 0) {
    return "‚ö† ‰æ°Ê†ºÂΩ¢Âºè„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì";
  }

  return results.join("\n");
}


function runCheck() {
  const modeA = document.getElementById("modeA").checked;
  const modeB = document.getElementById("modeB").checked;
  const sourceText = document.getElementById("sourceText").value;
  const designText = document.getElementById("designText").value;
  const resultDiv = document.getElementById("result");
  let result = "";

  if (modeA) {
    const text = designText.replace(/\s+/g, " ");
    result += checkPrices(text) + "\n";

    result += "\nüì¶„ÄêÊï∞Èáè„ÉªÂçò‰Ωç„ÉÅ„Çß„ÉÉ„ÇØ„Äë\n";
    const unitRegex = /\d+(ÂÄã|„Ç≥|„É∂|„Ç±|ÂÄãÂÖ•|Êûö|Êú¨|Êú¨ÂÖ•)/g;
    const unitMatches = [...text.matchAll(unitRegex)].map(m => m[1]);
    const uniqueUnits = [...new Set(unitMatches)];
    if (uniqueUnits.length <= 1) {
      result += `‚úÖ Ë°®Ë®ò„ÇÜ„Çå„Å™„ÅóÔºà${uniqueUnits[0] || "Âçò‰ΩçÊú™Ê§úÂá∫"}Ôºâ\n`;
    } else {
      result += `‚ö† Ë°®Ë®ò„ÇÜ„Çå„ÅÇ„ÇäÔºö„Äå${uniqueUnits.join("„Äç„Äå")}„Äç„ÅåÊ∑∑Âú®„Åó„Å¶„ÅÑ„Åæ„Åô\n`;
    }
    result += "\n";
  }

  if (modeB) {
    const srcLines = sourceText.split(/\r?\n/).map(line => line.trim()).filter(line => line);
    const desText = designText.replace(/\s+/g, " ");
    result += "üìÑ„ÄêÂ∑ÆÂàÜ„ÉÅ„Çß„ÉÉ„ÇØ„Äë\n";
    srcLines.forEach((line, i) => {
      if (!desText.includes(line)) {
        result += `‚ö† ÂéüÁ®ø„ÅÆÊñá„Äå${line}„Äç„Åå„Éá„Ç∂„Ç§„É≥„Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì\n`;
      }
    });
  }

  resultDiv.innerText = result || "‚úÖ ÂïèÈ°å„Å™„ÅóÔºÅ";
}

document.getElementById("sourceFile").addEventListener("change", async (e) => {
  const file = e.target.files[0];
  const mode = document.querySelector("input[name='sourceMode']:checked").value;
  const useOCR = document.getElementById("useOCR").checked;
  if (!file) return;

  if (mode === "excel") {
    const reader = new FileReader();
    reader.onload = function (e) {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const text = XLSX.utils.sheet_to_csv(sheet);
      document.getElementById("sourceText").value = text;
    };
    reader.readAsArrayBuffer(file);
  } else if (mode === "pdf") {
    const reader = new FileReader();
    reader.onload = async function () {
      const typedarray = new Uint8Array(this.result);
      const loadingTask = pdfjsLib.getDocument({
        data: typedarray,
        cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/cmaps/',
        cMapPacked: true,
        useWorkerFetch: true
      });

      const pdf = await loadingTask.promise;
      let fullText = "";
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const canvas = document.getElementById("hiddenCanvas");
        const ctx = canvas.getContext("2d", { willReadFrequently: true });
        const viewport = page.getViewport({ scale: 2 });
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        await page.render({ canvasContext: ctx, viewport: viewport }).promise;

        if (useOCR) {
          console.log("üß† OCR„É¢„Éº„Éâ„ÅßÂá¶ÁêÜ‰∏≠");
          const { data: { text } } = await Tesseract.recognize(canvas, 'jpn');
          fullText += text + "\n";
        } else {
          console.log("üìÑ „ÉÜ„Ç≠„Çπ„ÉàÊäΩÂá∫„É¢„Éº„Éâ„ÅßÂá¶ÁêÜ‰∏≠");

          const textContent = await page.getTextContent();
          console.log("textContent „ÅÆ‰∏≠Ë∫´Ôºö", textContent); // „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÂÖ®‰ΩìÁ¢∫Ë™çÁî®

          // ‚Üì ‰ª•‰∏ã„ÇíËøΩÂä†
          window._debugText = textContent;  // ‚Üê DevTools„ÅßÁ¢∫Ë™ç„Åó„ÇÑ„Åô„ÅèÔºÅ
          console.log("‚úÖ textContent „Çí window._debugText „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü");

          const strings = textContent.items.map((item) => item.str);
          console.log("strings „ÅÆ‰∏≠Ë∫´Ôºö", strings); // ÂÆüÈöõ„ÅÆÊñáÂ≠óÂàóÈÖçÂàó

          fullText += strings.join(" ") + "\n";
        }

      }
      document.getElementById("sourceText").value = fullText;
    };
    reader.readAsArrayBuffer(file);
  }
});

document.getElementById("designPDF").addEventListener("change", async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = async function () {
    const typedarray = new Uint8Array(this.result);
    const loadingTask = pdfjsLib.getDocument({
      data: typedarray,
      cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/cmaps/',
      cMapPacked: true,
      useWorkerFetch: true
    });
    const pdf = await loadingTask.promise;

    let fullText = "";
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const textContent = await page.getTextContent();
      const strings = textContent.items.map((item) => item.str);
      fullText += strings.join(" ") + "\n";
    }
    document.getElementById("designText").value = fullText;
  };
  reader.readAsArrayBuffer(file);
});
